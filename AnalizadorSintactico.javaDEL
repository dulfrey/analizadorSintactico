import java.util.*;
/*
 * 	Gramática
 * 
 *  A -> B uno
 *  A -> dos
 *  B -> tres
 *  B -> cuatro A	
 * 
 */

public class AnalizadorSintactico {
	Token currentToken;
	Token[] tokens ;
	int indexToken = 0;

	private void cargarTokens() {
		currentToken = Tokens.the_tokens[0];

		for (int i = 0; i < Tokens.the_tokens.length; i++) {
			System.out.println( Tokens.the_tokens[i].type);
		}
	}
	
	public AnalizadorSintactico() {
		cargarTokens();
		file();
		comprobarFinFichero();
	}
	
	public void comprobarFinFichero() {
		if ( this.currentToken.getType() == "$" ) {
			System.out.println("Exito fin de fichero");
		}
		else {
			errorSintaxis(this.currentToken.getType());
		}
	}

	
	
	private void file() {

		String pred1[]="NEWLINE, OTHER, ID, IMPORT, FROM, LOG, RETORNO, IF, FOR, WHILE, FUNCION, EOF".split(", ");
		List<String> predl1 = Arrays.asList(pred1);
		
		if ( predl1.contains(this.currentToken.getType())) {
			file_a();
			emparejar("EOF");
		}
		else 
			errorSintaxis(this.currentToken.getType());
	}
	

	private void file_a() {

		
		if ( this.currentToken.getType() == "OTHER" || this.currentToken.getType() == "ID" ||
			 this.currentToken.getType() == "FROM" || this.currentToken.getType() == "LOG" ||
			 this.currentToken.getType() == "RETORNO" || this.currentToken.getType() == "IF" || 
			 this.currentToken.getType() == "FOR" || this.currentToken.getType() == "WHILE" ||
			 this.currentToken.getType() == "FUNCION" ) {
			stat();
			file_a();
		}else if (this.currentToken.getType() == "NEWLINE") {
			emparejar("NEWLINE");
			file_a();
		}else if (this.currentToken.getType() == "EOF") {
			
		}
		else 
			errorSintaxis(this.currentToken.getType());
	}

	private void array() {
		if ( this.currentToken.getType() == "OKEY"  ) {
				emparejar("OKEY");
				array_a();
				file_a();
			}
			else 
				errorSintaxis(this.currentToken.getType());
	}
	
	private void array_a() {
		if ( this.currentToken.getType() == "OPAR" || this.currentToken.getType() == "MINUS" ||
				 this.currentToken.getType() == "NOT" || this.currentToken.getType() == "IN" ||
				 this.currentToken.getType() == "FLOAT" || this.currentToken.getType() == "TRUE" || 
				 this.currentToken.getType() == "FALSE" || this.currentToken.getType() == "STRING" ||
				 this.currentToken.getType() == "OKEY" || this.currentToken.getType() == "OBRACE" ||
				 this.currentToken.getType() == "ID" ) {
				expr();
				array_b();
			}else if (this.currentToken.getType() == "CKEY") {

			}
			else 
				errorSintaxis(this.currentToken.getType());
		
	}

	private void array_b() {
		if ( this.currentToken.getType() == "COMMA"  ) {
				emparejar("COMMA");
				expr();
				array_b();
			}else if (this.currentToken.getType() == "CKEY" || this.currentToken.getType() == "CPAR") {

			}
			else 
				errorSintaxis(this.currentToken.getType());
	}
	
	private void accessarray() {

		if ( this.currentToken.getType() == "ID"  ) {
				variable();
				emparejar("OKEY");
				expr();
				emparejar("CKEY");
			}
			else 
				errorSintaxis(this.currentToken.getType());
	}

	private void stat() {
		
		if ( this.currentToken.getType() == "OTHER" || this.currentToken.getType() == "ID" ||
			 this.currentToken.getType() == "IMPORT" || this.currentToken.getType() == "FROM" ||
			 this.currentToken.getType() == "LOG" || this.currentToken.getType() == "RETORNO" ) {
			simple_stat();
		}else if (this.currentToken.getType() == "IF" || this.currentToken.getType() == "FOR" ||
				 this.currentToken.getType() == "WHILE" || this.currentToken.getType() == "FUNCION" ) {
			complex_stat();
		}else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void complex_stat() {
		if (this.currentToken.getType() == "IF") {
			if_stat();
		}else if (this.currentToken.getType() == "WHILE") {
			while_stat();
		}else if (this.currentToken.getType() == "FOR") {
			for_stat();
		}else if (this.currentToken.getType() == "FUNCION") {
			funcion();
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void funcion() {
		if (this.currentToken.getType() == "FUNCION") {
			emparejar("FUNCION");
			emparejar("ID");
			emparejar("OPAR");
			f_para_a();
			emparejar("CPAR");
			f_more();
			emparejar("END");
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void f_more() {

		if (this.currentToken.getType() == "NEWLINE") {
			emparejar("NEWLINE");
			f_more();
		}else if ( this.currentToken.getType() == "OTHER" || this.currentToken.getType() == "ID" ||
				 this.currentToken.getType() == "IMPORT" || this.currentToken.getType() == "FROM" ||
				 this.currentToken.getType() == "LOG" || this.currentToken.getType() == "RETORNO" ||
				 this.currentToken.getType() == "IF" || this.currentToken.getType() == "FOR" ||
				 this.currentToken.getType() == "WHILE" || this.currentToken.getType() == "FUNCION") {
				stat();
				f_more();
		}else if (this.currentToken.getType() == "END") {
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void f_para_a() {
		if (this.currentToken.getType() == "ID") {
			parameter();
			f_para_b();
		}else if ( this.currentToken.getType() == "CPAR") {
			
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void f_para_b() {
		if (this.currentToken.getType() == "ID") {
			emparejar("COMMA");
			parameter();
			f_para_b();
		}else if ( this.currentToken.getType() == "CPAR") {
			
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void parameter() {
		// TODO Auto-generated method stub
		
	}

	private void for_stat() {
		if (this.currentToken.getType() == "FOR") {
			emparejar("FOR");
			emparejar("ID");
			emparejar("IN");
			expr();
			stat_block();
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void while_stat() {
		if (this.currentToken.getType() == "WHILE") {
			emparejar("WHILE");
			expr();
			stat_block();
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void if_stat() {

		if (this.currentToken.getType() == "IF") {
			emparejar("IF");
			condition_block();
			more();
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void more() {
		if ( this.currentToken.getType() == "ELSE") {
			emparejar("ELSE");
			emparejar("IF");
			condition_block();
			more();
		}else if (this.currentToken.getType() == "ELSE" ) {
			emparejar("ELSE");
			stat_block();
		}else if ( this.currentToken.getType() == "NEWLINE" || this.currentToken.getType() == "OTHER" ||
				 this.currentToken.getType() == "ID" || this.currentToken.getType() == "IMPORT" ||
				 this.currentToken.getType() == "FROM" || this.currentToken.getType() == "LOG" ||
				 this.currentToken.getType() == "RETORNO" || this.currentToken.getType() == "IF" ||
				 this.currentToken.getType() == "FOR" || this.currentToken.getType() == "WHILE" ||
				 this.currentToken.getType() == "FUNCION" || this.currentToken.getType() == "CBRACE" ||
				 this.currentToken.getType() == "END" || this.currentToken.getType() == "EOF" ) {
		}else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void stat_block() {
		if (this.currentToken.getType() == "OBRACE" ) {
			emparejar("OBRACE");
			s_block_a();
			emparejar("CBRACE");
			stat_block();
		}else if ( this.currentToken.getType() == "ID" || this.currentToken.getType() == "OTHER" ||
				 this.currentToken.getType() == "FUNCION" || this.currentToken.getType() == "IMPORT" ||
				 this.currentToken.getType() == "FROM" || this.currentToken.getType() == "LOG" ||
				 this.currentToken.getType() == "RETORNO" || this.currentToken.getType() == "IF" ||
				 this.currentToken.getType() == "FOR" || this.currentToken.getType() == "WHILE" ) {
			stat();
			emparejar("NEWLINE");
		}else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void s_block_a() {
		if ( this.currentToken.getType() == "ID" || this.currentToken.getType() == "OTHER" ||
				 this.currentToken.getType() == "FUNCION" || this.currentToken.getType() == "IMPORT" ||
				 this.currentToken.getType() == "FROM" || this.currentToken.getType() == "LOG" ||
				 this.currentToken.getType() == "RETORNO" || this.currentToken.getType() == "IF" ||
				 this.currentToken.getType() == "FOR" || this.currentToken.getType() == "WHILE" ) {
			stat();
			s_block_a();
		}else if ( this.currentToken.getType() == "NEWLINE"  ) {
			emparejar("NEWLINE");
			s_block_a();
		}else if ( this.currentToken.getType() == "CBRACE"  ) {

		}else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void condition_block() {
		if ( this.currentToken.getType() == "OPAR" || this.currentToken.getType() == "MINUS" ||
				 this.currentToken.getType() == "NOT" || this.currentToken.getType() == "IN" ||
				 this.currentToken.getType() == "FLOAT" || this.currentToken.getType() == "TRUE" ||
				 this.currentToken.getType() == "FALSE" || this.currentToken.getType() == "STRING" ||
				 this.currentToken.getType() == "OKEY" || this.currentToken.getType() == "OBRACE" ||
				 this.currentToken.getType() == "ID" ) {
			expr();
			c_block_a();
			stat_block();
		}else 
			errorSintaxis(this.currentToken.getType());
	}

	private void c_block_a() {
		if ( this.currentToken.getType() == "NEWLINE" ) {
			emparejar("NEWLINE");
		}else if ( this.currentToken.getType() == "OBRACE" || this.currentToken.getType() == "OTHER" ||
				 this.currentToken.getType() == "ID" || this.currentToken.getType() == "IMPORT" ||
				 this.currentToken.getType() == "FROM" || this.currentToken.getType() == "LOG" ||
				 this.currentToken.getType() == "RETORNO" || this.currentToken.getType() == "IF" ||
				 this.currentToken.getType() == "FOR" || this.currentToken.getType() == "WHILE" ||
				 this.currentToken.getType() == "FUNCION" ) {
			
		}else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void simple_stat() {
		if (this.currentToken.getType() == "ID") {
			assignment();
		}else if (this.currentToken.getType() == "LOG") {
			log();
		}else if (this.currentToken.getType() == "IMPORT" || this.currentToken.getType() == "FROM") {
			importar();
		}else if (this.currentToken.getType() == "RETORNO") {
			retornar();
		}else if (this.currentToken.getType() == "OTHER") {
			emparejar("OTHER");
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void retornar() {
		if (this.currentToken.getType() == "RETORNO") {
			emparejar("RETORNO");
			emparejar("OPAR");
			expr();
			emparejar("CPAR");
			emparejar("NEWLINE");
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void importar() {
		if (this.currentToken.getType() == "IMPORT") {
			emparejar("IMPORT");
			emparejar("ID");
			id_sub();
		}else if (this.currentToken.getType() == "FROM") {
			emparejar("FROM");
			emparejar("ID");
			emparejar("IMPORT");
			emparejar("ID");
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void id_sub() {

		if ( this.currentToken.getType() == "POINT") {
			emparejar("POINT");
			emparejar("ID");
			id_sub();
		}else if ( this.currentToken.getType() == "OKEY" || this.currentToken.getType() == "OPAR" ||
				 this.currentToken.getType() == "ASSIGN" || this.currentToken.getType() == "NEWLINE" ||
				 this.currentToken.getType() == "OTHER" || this.currentToken.getType() == "ID" ||
				 this.currentToken.getType() == "IMPORT" || this.currentToken.getType() == "FROM" ||
				 this.currentToken.getType() == "LOG" || this.currentToken.getType() == "RETORNO" ||
				 this.currentToken.getType() == "IF" || this.currentToken.getType() == "FOR" ||
				 this.currentToken.getType() == "WHILE" || this.currentToken.getType() == "FUNCION" ||
				 this.currentToken.getType() == "CBRACE" || this.currentToken.getType() == "END" ||
				 this.currentToken.getType() == "EOF" || this.currentToken.getType() == "POW" ||
				 this.currentToken.getType() == "MULT" || this.currentToken.getType() == "DIV" ||
				 this.currentToken.getType() == "MOD" || this.currentToken.getType() == "PLUS" ||
				 this.currentToken.getType() == "MINUS" || this.currentToken.getType() == "LTEG" ||
				 this.currentToken.getType() == "GTEG" || this.currentToken.getType() == "LT" ||
				 this.currentToken.getType() == "GT" || this.currentToken.getType() == "EQ" ||
				 this.currentToken.getType() == "NEQ" || this.currentToken.getType() == "AND" ||
				 this.currentToken.getType() == "OR" || this.currentToken.getType() == "CPAR" ||
				 this.currentToken.getType() == "COMMA" || this.currentToken.getType() == "CKEY" ||
				 this.currentToken.getType() == "OBRACE" ) {
			
		}else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void log() {
		if (this.currentToken.getType() == "LOG") {
			emparejar("LOG");
			emparejar("OPAR");
			expr();
			emparejar("CPAR");
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void assignment() {
		if (this.currentToken.getType() == "ID") {
			variable();
			emparejar("ASSIGN");
			assign_a();
		}
		else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void assign_a() {

		if (this.currentToken.getType() == "ID") {
			assignment();
		}else if (this.currentToken.getType() == "OPAR" || this.currentToken.getType() == "MINUS" ||
				 this.currentToken.getType() == "NOT" || this.currentToken.getType() == "INT" ||
				 this.currentToken.getType() == "FLOAT" || this.currentToken.getType() == "STRING" ||
				 this.currentToken.getType() == "OKEY" || this.currentToken.getType() == "OBRACE" ||
				 this.currentToken.getType() == "ID" ) {
			expr();
		}else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void expr() {
		if ( this.currentToken.getType() == "MINUS" || this.currentToken.getType() == "NOT") {
			op_u();
			expr();
			expr_a();
		}else if ( this.currentToken.getType() == "OPAR" ) {
			emparejar("OPAR");
			expr();
			emparejar("CPAR");
			expr_a();
		}else if ( this.currentToken.getType() == "INT" || this.currentToken.getType() == "FLOAT" ||
				 this.currentToken.getType() == "TRUE" || this.currentToken.getType() == "FALSE" ||
				 this.currentToken.getType() == "STRING" || this.currentToken.getType() == "OKEY" ||
				 this.currentToken.getType() == "OBRACE" || this.currentToken.getType() == "ID") {
			object();
			expr_a();
		}else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void object() {
		// TODO Auto-generated method stub
		
	}

	private void expr_a() {
		// TODO Auto-generated method stub
		
	}

	private void op_u() {
		// TODO Auto-generated method stub
		
	}

	private void variable() {

		if (this.currentToken.getType() == "ID") {
			emparejar("ID");
			id_sub();
			var_a();
		}else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void var_a() {
		if ( this.currentToken.getType() == "OPAR") {
			var_b();
		}else if ( this.currentToken.getType() == "OKEY") {
			emparejar("OKEY");
			expr();
			emparejar("CKEY");
		}else if ( this.currentToken.getType() == "OKEY" || this.currentToken.getType() == "ASSIGN" ||
				 this.currentToken.getType() == "POW" || this.currentToken.getType() == "MULT" ||
				 this.currentToken.getType() == "DIV" || this.currentToken.getType() == "MOD" ||
				 this.currentToken.getType() == "PLUS" || this.currentToken.getType() == "MINUS" ||
				 this.currentToken.getType() == "LTEG" || this.currentToken.getType() == "GTEG" ||
				 this.currentToken.getType() == "LT" || this.currentToken.getType() == "GT" ||
				 this.currentToken.getType() == "EQ" || this.currentToken.getType() == "NEQ" ||
				 this.currentToken.getType() == "AND" || this.currentToken.getType() == "OR" ||
				 this.currentToken.getType() == "CPAR" || this.currentToken.getType() == "COMMA" ||
				 this.currentToken.getType() == "CKEY" || this.currentToken.getType() == "OBRACE" ||
				 this.currentToken.getType() == "OTHER" || this.currentToken.getType() == "ID" ||
				 this.currentToken.getType() == "IMPORT" || this.currentToken.getType() == "FROM" ||
				 this.currentToken.getType() == "LOG" || this.currentToken.getType() == "RETORNO" ||
				 this.currentToken.getType() == "IF" || this.currentToken.getType() == "FOR" ||
				 this.currentToken.getType() == "WHILE" || this.currentToken.getType() == "FUNCION" ||
				 this.currentToken.getType() == "NEWLINE" || this.currentToken.getType() == "CBRACE" ||
				 this.currentToken.getType() == "END" || this.currentToken.getType() == "EOF") {
		}else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void var_b() {
		if ( this.currentToken.getType() == "OPAR") {
			emparejar("OPAR");
			var_c();
			emparejar("CPAR");
		}else if ( this.currentToken.getType() == "OKEY" || this.currentToken.getType() == "ASSIGN" ||
				 this.currentToken.getType() == "POW" || this.currentToken.getType() == "MULT" ||
				 this.currentToken.getType() == "DIV" || this.currentToken.getType() == "MOD" ||
				 this.currentToken.getType() == "PLUS" || this.currentToken.getType() == "MINUS" ||
				 this.currentToken.getType() == "LTEG" || this.currentToken.getType() == "GTEG" ||
				 this.currentToken.getType() == "LT" || this.currentToken.getType() == "GT" ||
				 this.currentToken.getType() == "EQ" || this.currentToken.getType() == "NEQ" ||
				 this.currentToken.getType() == "AND" || this.currentToken.getType() == "OR" ||
				 this.currentToken.getType() == "CPAR" || this.currentToken.getType() == "COMMA" ||
				 this.currentToken.getType() == "CKEY" || this.currentToken.getType() == "OBRACE" ||
				 this.currentToken.getType() == "OTHER" || this.currentToken.getType() == "ID" ||
				 this.currentToken.getType() == "IMPORT" || this.currentToken.getType() == "FROM" ||
				 this.currentToken.getType() == "LOG" || this.currentToken.getType() == "RETORNO" ||
				 this.currentToken.getType() == "IF" || this.currentToken.getType() == "FOR" ||
				 this.currentToken.getType() == "WHILE" || this.currentToken.getType() == "FUNCION" ||
				 this.currentToken.getType() == "NEWLINE" || this.currentToken.getType() == "CBRACE" ||
				 this.currentToken.getType() == "END" || this.currentToken.getType() == "EOF") {
			
		}else 
			errorSintaxis(this.currentToken.getType());
		
	}

	private void var_c() {
		if ( this.currentToken.getType() == "OPAR" || this.currentToken.getType() == "MINUS" ||
				 this.currentToken.getType() == "NOT" || this.currentToken.getType() == "INT" ||
				 this.currentToken.getType() == "FLOAT" || this.currentToken.getType() == "TRUE" ||
				 this.currentToken.getType() == "FALSE" || this.currentToken.getType() == "STRING" ||
				 this.currentToken.getType() == "OKEY" || this.currentToken.getType() == "OBRACE" ||
				 this.currentToken.getType() == "ID") {
			expr();
			array_b();
		}else if ( this.currentToken.getType() == "CPAR") {
			
		}else 
			errorSintaxis(this.currentToken.getType());
		
	}

	public final void emparejar(String tokEsperado)
	{
		
		try {
			if (currentToken.getType() == tokEsperado) {
				currentToken = getNextToken();
			}
			else
				errorSintaxis(tokEsperado);
		}catch(Exception e) {
			System.out.println("Error de sintasis ");
		}

	}
	
	private void errorSintaxis(String tokEsperado) {
		System.out.println( "Error! token no esperado " + tokEsperado);
	}
	
	private Token getNextToken() {
		if (indexToken ==  Tokens.the_tokens.length-1) {
			return null;
		}
		indexToken++;
		this.currentToken = Tokens.the_tokens[indexToken];
		return currentToken;
	}

}
